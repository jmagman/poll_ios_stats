// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface ACMemoryUsage ()
+ (ACMemoryUsage *)fromList:(NSArray<id> *)list;
+ (nullable ACMemoryUsage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ACStartupTime ()
+ (ACStartupTime *)fromList:(NSArray<id> *)list;
+ (nullable ACStartupTime *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation ACMemoryUsage
+ (instancetype)makeWithDirtyMemoryUsage:(nullable NSNumber *)dirtyMemoryUsage
    ownedSharedMemoryUsage:(nullable NSNumber *)ownedSharedMemoryUsage {
  ACMemoryUsage* pigeonResult = [[ACMemoryUsage alloc] init];
  pigeonResult.dirtyMemoryUsage = dirtyMemoryUsage;
  pigeonResult.ownedSharedMemoryUsage = ownedSharedMemoryUsage;
  return pigeonResult;
}
+ (ACMemoryUsage *)fromList:(NSArray<id> *)list {
  ACMemoryUsage *pigeonResult = [[ACMemoryUsage alloc] init];
  pigeonResult.dirtyMemoryUsage = GetNullableObjectAtIndex(list, 0);
  pigeonResult.ownedSharedMemoryUsage = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable ACMemoryUsage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ACMemoryUsage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.dirtyMemoryUsage ?: [NSNull null],
    self.ownedSharedMemoryUsage ?: [NSNull null],
  ];
}
@end

@implementation ACStartupTime
+ (instancetype)makeWithStartupTime:(nullable NSNumber *)startupTime {
  ACStartupTime* pigeonResult = [[ACStartupTime alloc] init];
  pigeonResult.startupTime = startupTime;
  return pigeonResult;
}
+ (ACStartupTime *)fromList:(NSArray<id> *)list {
  ACStartupTime *pigeonResult = [[ACStartupTime alloc] init];
  pigeonResult.startupTime = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable ACStartupTime *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ACStartupTime fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.startupTime ?: [NSNull null],
  ];
}
@end

@interface ACMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation ACMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [ACMemoryUsage fromList:[self readValue]];
    case 130: 
      return [ACStartupTime fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ACMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation ACMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ACMemoryUsage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ACStartupTime class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ACMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ACMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ACMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ACMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ACGetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ACMessagesPigeonCodecReaderWriter *readerWriter = [[ACMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpACPollIosStats(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACPollIosStats> *api) {
  SetUpACPollIosStatsWithSuffix(binaryMessenger, api, @"");
}

void SetUpACPollIosStatsWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ACPollIosStats> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.poll_ios_stats.PollIosStats.pollMemoryUsage", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:ACGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pollMemoryUsageWithError:)], @"ACPollIosStats api (%@) doesn't respond to @selector(pollMemoryUsageWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        ACMemoryUsage *output = [api pollMemoryUsageWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.poll_ios_stats.PollIosStats.pollStartupTime", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:ACGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pollStartupTimeWithError:)], @"ACPollIosStats api (%@) doesn't respond to @selector(pollStartupTimeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        ACStartupTime *output = [api pollStartupTimeWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
